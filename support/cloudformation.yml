# If needed, doc on sharing domain between accounts: https://sst.dev/archives/share-route-53-domains-across-aws-accounts.html

AWSTemplateFormatVersion: 2010-09-09
Description: ""
Parameters:
  LoadBalancerEnabled:
    Type: String
    Description: "Create a load balancer"
    Default: "ENABLED"
    AllowedValues:
      - ENABLED
      - DISABLED
  VpcCidrBlock:
    Type: String
    Description: "The CIDR block for the VPC"
    Default: "14.0.0.0/16"
  PublicSubnet1CidrBlock:
    Type: String
    Description: "The CIDR block for the public subnet 1"
    Default: "14.0.1.0/24"
  PublicSubnet2CidrBlock:
    Type: String
    Description: "The CIDR block for the public subnet 2"
    Default: "14.0.2.0/24"
Conditions:
  LoadBalancerEnabled: !Equals [!Ref LoadBalancerEnabled, "ENABLED"]
Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: LoadBalancerEnabled
    Properties:
      Name: !Sub "${AWS::StackName}-loadbalancer"
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref SecurityGroup
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Stack
          Value: !Sub "${AWS::StackName}"
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Stack
          Value: !Sub "${AWS::StackName}"
        - Key: Name
          Value: !Sub "${AWS::StackName}-igw"
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CidrBlock
      Tags:
        - Key: Stack
          Value: !Sub "${AWS::StackName}"
        - Key: Name
          Value: !Sub "${AWS::StackName} Public Subnet (AZ1)"
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CidrBlock
      Tags:
        - Key: Stack
          Value: !Sub "${AWS::StackName}"
        - Key: Name
          Value: !Sub "${AWS::StackName} Public Subnet (AZ2)"
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Stack
          Value: !Sub "${AWS::StackName}"
        - Key: Name
          Value: !Sub "${AWS::StackName} Public Routes"
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${AWS::StackName}-security-group"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow outbound HTTP traffic
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow outbound HTTPS traffic
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp: 0.0.0.0/0
          Description: Allow outbound FPM Traffic
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
          Description: Allow outbound HTTP traffic over IPv6
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0
          Description: Allow outbound HTTPS traffic over IPv6
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIpv6: ::/0
          Description: Allow outbound FPM Traffic over IPv6
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: 9000
          ToPort: 9000
          CidrIpv6: ::/0
Outputs:
  LoadBalancerName:
    Description: "The name of the load balancer"
    Condition: LoadBalancerEnabled
    Value: !GetAtt LoadBalancer.LoadBalancerName
  LoadBalancerArn:
    Description: "The ARN of the load balancer"
    Condition: LoadBalancerEnabled
    Value: !Ref LoadBalancer
  LoadBalancerDnsName:
    Description: "The DNS name of the load balancer"
    Condition: LoadBalancerEnabled
    Value: !GetAtt LoadBalancer.DNSName
  LoadBalancerCanonicalHostedZoneId:
    Description: "The canonical hosted zone ID of the load balancer"
    Condition: LoadBalancerEnabled
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
  VpcId:
    Description: "The ID of the VPC"
    Value: !Ref VPC
  PublicSubnets:
    Description: "The IDs of the public subnets"
    Value: !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2]]
  PublicSubnet1:
    Description: "The ID of the public subnet 1"
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: "The ID of the public subnet 2"
    Value: !Ref PublicSubnet2
  SecurityGroupId:
    Description: "The ID of the security group"
    Value: !Ref SecurityGroup